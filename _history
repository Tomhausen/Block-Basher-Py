{"entries":[{"timestamp":1716548119641,"editorVersion":"2.0.2","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"l\"><"],[-1,"variables></variables><"],[0,"bloc"]],"start1":52,"start2":52,"length1":31,"length2":8},{"diffs":[[0," y=\"0\"><"],[1,"statement name=\"HANDLER\"><block type=\"mixer_play_sound\"><field name=\"sound\">music.baDing</field></block></statement><"],[0,"/block><"]],"start1":87,"start2":87,"length1":16,"length2":133}]},{"type":"removed","filename":"main.py","value":"music.ba_ding.play()"},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"music.baDing.play()"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":20}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"Untitled"],[1,"with music"],[0,"\",\n "]],"start1":11,"start2":11,"length1":16,"length2":18},{"diffs":[[0,"son\""],[-1,"\n    ]"],[1,",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.12.2\",\n        \"pxt\": \"8.5.2\"\n    },\n    \"preferredEditor\": \"pyprj\""],[0,"\n}\n"]],"start1":197,"start2":197,"length1":13,"length2":196}]},{"type":"removed","filename":"tilemap.g.jres","value":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}"},{"type":"removed","filename":"tilemap.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myTiles {\n    //% fixedInstance jres blockIdentity=images._tile\n    export const transparency16 = image.ofBuffer(hex``);\n\n    helpers._registerFactory(\"tile\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"transparency16\":return transparency16;\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"}]},{"timestamp":1716548137682,"editorVersion":"2.0.2","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"son\""],[-1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ]"],[0,"\n}\n"]],"start1":195,"start2":195,"length1":64,"length2":13}]},{"type":"added","filename":"main.py","value":"\n"}]},{"timestamp":1718042395638,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"son\""],[-1,"\n    ]"],[1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[0,"\n}\n"]],"start1":195,"start2":195,"length1":13,"length2":64}]},{"type":"removed","filename":"main.py","value":"\n"}]},{"timestamp":1718042422734,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   ]"],[-1,",\n    \"preferredEditor\": \"blocksprj\""],[0,"\n}\n"]],"start1":201,"start2":201,"length1":43,"length2":7}]}]},{"timestamp":1719571303926,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let i: number;\nnamespace SpriteKind {\n    export const cursor = SpriteKind.create()\n    //  GM1\n    export const path = SpriteKind.create()\n    //  /GM1\n    //  BH6\n    export const randomiser = SpriteKind.create()\n}\n\n//  /BH6\n//  vars\nlet proj_count = 10\nlet proj_speed = 200\nlet lives = 3\n//  GM1\nlet draw_path = false\n//  /GM1\n//  sprites\nlet ghost = sprites.create(assets.image`ghost`, SpriteKind.Player)\nghost.bottom = 120\nghost.setStayInScreen(true)\nlet pointer = sprites.create(image.create(1, 1), SpriteKind.cursor)\npointer.image.fill(1)\npointer.setFlag(SpriteFlag.Invisible, true)\n//  aim sprite\n//  GM1\n//  aim_sprite = sprites.create(image.create(150, 150)) # REMOVE\n//  aim_sprite.image.fill_rect(74, 74, 75, 2, 2) # REMOVE\nlet aim_sprite = sprites.create(image.create(2, 2))\naim_sprite.image.fill(1)\naim_sprite.setFlag(SpriteFlag.GhostThroughWalls, true)\n//  /GM1\naim_sprite.z = -1\naim_sprite.setFlag(SpriteFlag.Invisible, true)\n//  BH3\n//  status bar\nlet one_shot_active = false\nlet power_up_bar = statusbars.create(160, 2, StatusBarKind.Magic)\npower_up_bar.bottom = 120\npower_up_bar.value = 0\n//  /BH3\n//  setup\nmusic.setVolume(20)\ntiles.setCurrentTilemap(assets.tilemap`level`)\nfor (i = 0; i < 3; i++) {\n    cycle_blocks()\n}\nfunction make_lives_text(location: any) {\n    let block_life = tiles.readDataNumber(location, \"life\")\n    let lives_text = textsprite.create(\"\" + block_life)\n    tiles.placeOnTile(lives_text, location)\n    tiles.setDataSprite(location, \"text\", lives_text)\n}\n\nfunction spawn_block(location: any) {\n    tiles.setTileAt(location, assets.tile`block`)\n    tiles.setWallAt(location, true)\n    let block_life = 3 + randint(-2, 2)\n    tiles.setDataNumber(location, \"life\", block_life)\n    make_lives_text(location)\n}\n\n//  BH2\nfunction spawn_bonus_ball(location: any) {\n    let bonus_ball = sprites.create(assets.image`bonus`, SpriteKind.Food)\n    tiles.placeOnTile(bonus_ball, location)\n    bonus_ball.setFlag(SpriteFlag.AutoDestroy, true)\n}\n\n//  /BH2\n//  GM2\nfunction spawn_special_block(location: any) {\n    if (randint(1, 2) == 1) {\n        tiles.setTileAt(location, assets.tile`horizontal`)\n    } else {\n        tiles.setTileAt(location, assets.tile`vertical`)\n    }\n    \n    tiles.setWallAt(location, true)\n    let block_life = 3 + randint(-2, 2)\n    tiles.setDataNumber(location, \"life\", block_life)\n    make_lives_text(location)\n}\n\n//  /GM2\n//  BH4\nfunction spawn_unbreakable_block(location: any) {\n    tiles.setTileAt(location, assets.tile`unbreakable`)\n    tiles.setWallAt(location, true)\n}\n\n//  /BH4\n//  BH6\nfunction spawn_randomiser(location: any) {\n    let randomiser = sprites.create(assets.image`randomiser`, SpriteKind.randomiser)\n    tiles.placeOnTile(randomiser, location)\n    randomiser.setFlag(SpriteFlag.AutoDestroy, true)\n}\n\n//  /BH6\nfunction spawn_row() {\n    for (let col = 0; col < 10; col++) {\n        if (randint(1, 5) > 1) {\n            spawn_block(tiles.getTileLocation(col, 0))\n        } else if (randint(1, 5) == 1) {\n            //  BH2\n            spawn_bonus_ball(tiles.getTileLocation(col, 0))\n        } else if (randint(1, 5) == 1) {\n            //  /BH2\n            //  GM2\n            spawn_special_block(tiles.getTileLocation(col, 0))\n        } else if (randint(1, 5) == 1) {\n            //  /GM2\n            //  BH4\n            spawn_unbreakable_block(tiles.getTileLocation(col, 0))\n        } else if (randint(1, 5) == 1) {\n            //  /BH4\n            //  BH6 \n            spawn_randomiser(tiles.getTileLocation(col, 0))\n        }\n        \n    }\n    //  /BH6\n    music.knock.play()\n}\n\nfunction move_block(location: tiles.Location) {\n    let new_location = tiles.getTileLocation(location.column, location.row + 1)\n    let block_image = tiles.getTileImage(location)\n    tiles.setTileAt(new_location, block_image)\n    tiles.setWallAt(new_location, true)\n    tiles.setTileAt(location, image.create(16, 16))\n    tiles.setWallAt(location, false)\n    tiles.moveData(location, new_location, true)\n}\n\nfunction move_row() {\n    let all_blocks = tilesAdvanced.getAllTilesWhereWallIs(true)\n    all_blocks.reverse()\n    for (let location of all_blocks) {\n        if (location.bottom > ghost.top - 16) {\n            //  BH4\n            if (tiles.tileAtLocationEquals(location, assets.tile`unbreakable`)) {\n                tiles.setTileAt(location, image.create(16, 16))\n                tiles.setWallAt(location, false)\n                continue\n            }\n            \n            //  /BH4\n            game.over(false)\n        }\n        \n        move_block(location)\n    }\n    //  BH2\n    for (let ball of sprites.allOfKind(SpriteKind.Food)) {\n        ball.y += 16\n    }\n    //  /BH2\n    //  BH6\n    for (let randomiser of sprites.allOfKind(SpriteKind.randomiser)) {\n        randomiser.y += 16\n    }\n}\n\n//  /BH2\nfunction cycle_blocks() {\n    move_row()\n    spawn_row()\n}\n\n//  BH3\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function activate_power_up() {\n    \n    if (power_up_bar.value >= power_up_bar.max) {\n        one_shot_active = true\n        power_up_bar.value = 0\n    }\n    \n})\n//  /BH3\n//  --GM1\nbrowserEvents.MouseLeft.onEvent(browserEvents.MouseButtonEvent.Pressed, function left_mouse_press(x: any, y: any) {\n    //  GM1\n    //  aim_sprite.set_flag(SpriteFlag.INVISIBLE, False) # REMOVE\n    //  aim_sprite.x = ghost.x # REMOVE\n    //  aim_sprite.y = ghost.y # REMOVE\n    \n    draw_path = true\n})\nbrowserEvents.MouseLeft.onEvent(browserEvents.MouseButtonEvent.Released, function left_mouse_release(x: any, y: any) {\n    //  GM1\n    \n    draw_path = false\n    aim_sprite.setFlag(SpriteFlag.Invisible, true)\n    //  REMOVE\n    //  /GM1\n    if (sprites.allOfKind(SpriteKind.Projectile).length < 1) {\n        timer.background(function fire() {\n            let fire_angle: number;\n            let proj: Sprite;\n            fire_angle = spriteutils.angleFrom(ghost, pointer)\n            for (let i = 0; i < proj_count; i++) {\n                proj = sprites.create(assets.image`projectile`, SpriteKind.Projectile)\n                proj.setPosition(ghost.x, ghost.y)\n                proj.setBounceOnWall(true)\n                spriteutils.setVelocityAtAngle(proj, fire_angle, proj_speed)\n                //  BH3\n                if (one_shot_active) {\n                    proj.startEffect(effects.fire)\n                }\n                \n                //  /BH3\n                pause(50)\n            }\n        })\n        animation.runImageAnimation(ghost, assets.animation`ghost throw`, 100, false)\n    }\n    \n})\n//  BH2\nsprites.onOverlap(SpriteKind.Projectile, SpriteKind.Food, function collect_bonus_ball(proj: Sprite, ball: Sprite) {\n    \n    proj_count += 1\n    ball.destroy()\n})\n//  /BH2\n//  BH6\nsprites.onOverlap(SpriteKind.Projectile, SpriteKind.randomiser, function hit_randomiser(proj: Sprite, randomiser: Sprite) {\n    let angle = spriteutils.degreesToRadians(randint(1, 360))\n    spriteutils.setVelocityAtAngle(proj, angle, proj_speed)\n    spriteutils.placeAngleFrom(proj, angle, 5, randomiser)\n})\n//  /BH6\n//  GM2\nfunction horizontal_destroyer_hit(location: tiles.Location) {\n    let effect_sprite: Sprite;\n    for (let block of tilesAdvanced.getAllTilesWhereWallIs(true)) {\n        if (block.row == location.row) {\n            block_damage(block)\n            effect_sprite = sprites.create(image.create(160, 2))\n            effect_sprite.image.fill(9)\n            effect_sprite.setPosition(80, block.y)\n            effect_sprite.lifespan = 500\n        }\n        \n    }\n}\n\n//  /GM2\n//  GM2\nfunction vertical_destroyer_hit(location: tiles.Location) {\n    let effect_sprite: Sprite;\n    for (let block of tilesAdvanced.getAllTilesWhereWallIs(true)) {\n        if (block.col == location.col) {\n            block_damage(block)\n            effect_sprite = sprites.create(image.create(2, 120))\n            effect_sprite.image.fill(9)\n            effect_sprite.setPosition(block.x, 60)\n            effect_sprite.lifespan = 500\n        }\n        \n    }\n}\n\n//  /GM2\nfunction block_damage(location: any) {\n    let effect_sprite: Sprite;\n    if (tiles.tileAtLocationEquals(location, assets.tile`unbreakable`)) {\n        return\n    }\n    \n    let new_life = tiles.readDataNumber(location, \"life\") - 1\n    tiles.readDataSprite(location, \"text\").destroy()\n    //  BH3\n    if (new_life < 1 || one_shot_active) {\n        //  EDIT\n        //  /BH3\n        tiles.setTileAt(location, image.create(16, 16))\n        tiles.setWallAt(location, false)\n        info.changeScoreBy(10)\n        //  BH1\n        scene.cameraShake(4, 500)\n        music.bigCrash.play()\n    } else {\n        //  /BH1\n        tiles.setDataNumber(location, \"life\", new_life)\n        make_lives_text(location)\n        //  BH1\n        music.footstep.play()\n        effect_sprite = sprites.create(image.create(16, 16))\n        effect_sprite.image.fill(2)\n        tiles.placeOnTile(effect_sprite, location)\n        effect_sprite.setFlag(SpriteFlag.Invisible, true)\n        effect_sprite.startEffect(effects.ashes, 200)\n        effect_sprite.lifespan = 200\n        //  /BH1\n        //  BH3\n        power_up_bar.value += 1\n    }\n    \n}\n\n//  /BH3\nscene.onHitWall(SpriteKind.Projectile, function wall_hit(proj: Sprite, location: tiles.Location) {\n    //  GM2\n    if (tiles.tileAtLocationEquals(location, assets.tile`horizontal`)) {\n        horizontal_destroyer_hit(location)\n    }\n    \n    if (tiles.tileAtLocationEquals(location, assets.tile`vertical`)) {\n        vertical_destroyer_hit(location)\n    }\n    \n    //  /GM2\n    if (tiles.tileAtLocationEquals(location, assets.tile`block`)) {\n        block_damage(location)\n    }\n    \n    if (proj.y > ghost.y) {\n        if (sprites.allOfKind(SpriteKind.Projectile).length == proj_count) {\n            ghost.x = proj.x\n        }\n        \n        proj.destroy()\n    }\n    \n})\n//  GM1 REMOVE\nfunction aim() {\n    let angle = spriteutils.radiansToDegrees(spriteutils.angleFrom(ghost, pointer))\n    transformSprites.rotateSprite(aim_sprite, angle)\n}\n\n//  /GM1\n//  GM1\nfunction path() {\n    let dot_sprite: Sprite;\n    aim_sprite.setPosition(ghost.x, ghost.y)\n    let direction = spriteutils.angleFrom(ghost, pointer)\n    let x_vector = Math.cos(direction)\n    let y_vector = Math.sin(direction)\n    let dot = image.create(2, 2)\n    dot.fill(1)\n    for (let path_length = 0; path_length < 10; path_length++) {\n        dot_sprite = sprites.create(dot, SpriteKind.path)\n        dot_sprite.setPosition(aim_sprite.x, aim_sprite.y)\n        for (let step_length = 0; step_length < 15; step_length++) {\n            aim_sprite.x += x_vector\n            if (tiles.tileAtLocationIsWall(aim_sprite.tilemapLocation())) {\n                aim_sprite.x -= x_vector\n                x_vector *= -1\n            }\n            \n            aim_sprite.y += y_vector\n            if (tiles.tileAtLocationIsWall(aim_sprite.tilemapLocation())) {\n                aim_sprite.y -= y_vector\n                y_vector *= -1\n            }\n            \n        }\n    }\n}\n\n//  --GH1\nsprites.onDestroyed(SpriteKind.Projectile, function trigger_game_loop() {\n    //  BH3 and BH5\n    \n    //  EDIT\n    //  /BH3 and /BH5\n    if (tiles.getTilesByType(assets.tile`block`).length < 1) {\n        game.over(true)\n    }\n    \n    if (sprites.allOfKind(SpriteKind.Projectile).length < 1) {\n        //  BH3\n        one_shot_active = false\n        //  /BH3\n        //  BH5\n        if (randint(1, 1) == 1) {\n            lives += 1\n        }\n        \n        //  /BH5\n        cycle_blocks()\n    }\n    \n})\n//  /GM1\ngame.onUpdate(function tick() {\n    pointer.x = browserEvents.mouseX()\n    pointer.y = browserEvents.mouseY()\n    if (pointer.y >= ghost.y - 5) {\n        pointer.y = ghost.y - 5\n    }\n    \n    //  GM1\n    //  aim() # REMOVE\n    if (sprites.allOfKind(SpriteKind.path).length > 0) {\n        sprites.destroyAllSpritesOfKind(SpriteKind.path)\n    }\n    \n    if (draw_path) {\n        path()\n    }\n    \n})"],[0,"\n"]],"start1":0,"start2":0,"length1":11832,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"block basher"],[1,"Untitled"],[0,"\",\n "]],"start1":11,"start2":11,"length1":20,"length2":16},{"diffs":[[0," \"*\""],[-1,",\n        \"Browser Events Advanced\": \"github:Tomhausen/Browser-Events-Advanced#v0.1.0\",\n        \"Sprites Advanced\": \"github:Tomhausen/Sprites-Advanced#v0.0.2\",\n        \"pxt-arcade-image-transform\": \"github:robo-technical-group/pxt-arcade-image-transform#v1.0.9\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"tileData\": \"github:neintoes/arcade-tile-data#f58f9ce61c28247dc3d3426c87d96ee6e49f47c8\",\n        \"Tiles Advanced\": \"github:Tomhausen/The-Code-Zone-Tiles-Advanced#v0.5.9\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"images.g.jres\",\n        \"images.g.ts\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"2.0.3\",\n        \"pxt\": \"10.0.23\"\n    }"],[1,"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ]"],[0,",\n  "]],"start1":88,"start2":88,"length1":949,"length2":121},{"diffs":[[0,"\": \""],[-1,"py"],[1,"blocks"],[0,"prj\""]],"start1":227,"start2":227,"length1":10,"length2":14}]},{"type":"added","filename":"images.g.jres","value":"{\n    \"image1\": {\n        \"data\": \"hwQYABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8P8AAAAAAAAAAAAAwLEAAAAAAAAA//8PH/sAAAAAAAD/3b38H7EAAAAAAPAbEd29H/sAAAAAAPAREb0czPEPAAAAAB8REfEfvf8PAAAAAB8REdER+///AAAAAB8REdERsf//AAAAAB8REfEf+///AAAAAPAREb0czbEPAAAAAPAbEd29H/sAAAAAAAD/3b38H7EAAAAAAAAA//8PH/sAAAAAAAAAAAAAz7EAAAAAAAAAAAAA8P8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"ghost\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgCAAAAAAAAJaJAAAAAAAAlokAAAAAAABgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"projectile\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACqqgAAAAAAoBqqCgAAAACqEaGqAAAAoKoaqqoKAACgqqqqqgoAAKCqoaqqCgAAoBoREaEKAAAAqqqqqgAAAACgqqoKAAAAAACqqgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"bonus\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMzMAAAAAADMzMzMAAAAwqjqjqgMAADCqMzOqAwAAMzo6o6MzAAAzM6M6MzMAADMzozozMwAAMzo6o6MzAAAwqjMzqgMAADCqOqOqAwAAADMzMzMAAAAAADMzAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"randomiser\"\n    },\n    \"anim1\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim1\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"YzgwMDE4MDAxODAwMDUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBmZmZmMDAwMDAwMDAwMDAwMDAwMDAwZmYxMTExZmYwMDAwMDAwMDAwMDAwMGYwMWIxMTExYjEwZjAwMDAwMDAwMDBmMGZmMWMxMTExMTEwZjAwMDAwMDAwZjAxYzExZGMxMTExMTFmMTAwMDAwMDAwZjBiMWIxYjExMTExZGRmZDAwMDAwMDAwZjBmYmZiY2YxZmYxZGNmZDAwMDAwMDAwMDAwMGNmMWYxMTExYjFmYjAwMDAwMDAwMDAwMGMwYmNiZGIxZjFmYzAwMDAwMDAwMDAwMGYwZmZmYmZiZmQwZjAwMDAwMDAwMDAwMDAwZmZmZmZmZmYwMDAwMDAwMDAwMDAwMDAwZmZmZmZmZmZmZjBmMDAwMDAwMDAwMDAwZjBmZmZmMWMxMWZjMDAwMDAwMDAwMDAwZjBmZmZmYjFiMWYxMDAwMDAwMDAwMDAwMDBmZmZmZmJmYmZiMDAwMDAwMDAwMDAwMDBmMGZmMGYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBmZmZmMDAwMDAwMDAwMDAwMDAwMDAwZmYxMTExZmYwMDAwMDAwMDAwMDAwMGYwMWIxMTExYjEwZjAwMDAwMDAwMDAwMGYwMTExMTExMTEwZjAwMDAwMDAwMDAwMGRmMTExMTExMTFmZDAwMDAwMDAwMDAwN2RmMTExMTExMTFmZDAwMDAwMDAwNzAwMGRmMTExMTExMTFmZDAwMDAwMDAwNzAwMGRmMTExMTExMTFmZDAwMDAwMDAwNzAwMGRmZGQxMTExZGRmZDBmMDAwMDAwNzAwN2JmYmRkZmZkZGJmYmZjMDAwMDAwNzA3N2NmY2QxZmYxZGNmY2ZiMDAwMDAwMDA3N2ZmYmZiZGIxZmRjZjBmMDAwMDAwMDBjZjFiY2JmZmZmZmYwMDAwMDAwMDAwMDAxZjFjMWNmZmZmZmYwMDAwMDAwMDAwMDBkZmRmZGZmZmZmMGYwMDAwMDAwMDAwMDBmMGYwZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBmZmZmMDAwMDAwMDAwMDAwMDAwMDAwZmYxMTExZmYwMDAwMDAwMDAwMDAwMGYwMWIxMTExYjEwZjAwMDAwMDAwMDAwMGYwMTExMTExMTEwZjAwMDAwMDAwMDAwMGRmMTExMTExMTFmMTAwMDAwMDAwMDAwMGRmMTExMTExMTFmZDAwMDAwMDAwMDAwMGRmMTExMTExMTFmZDAwMDAwMDAwMDAwMGNmZGQxMTExZGRmYzBmMDAwMDAwMDAwMGYwY2IxZmYxYmNiZmZiMDAwMDAwMDAwMGYwYmZiZGIxZmRmZjBmMDAwMDAwMDAwMDAwY2ZmYmZiZmQwMDAwMDAwMDAwMDAwMDAwZmZmZmZmZmYwMDAwMDAwMDAwMDAwMGZmZmZmZmZmZmYwMDAwMDAwMDAwMDBmMGJjYjFmY2ZmMGYwMDAwMDAwMDAwMDAwMGZmZmIwZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBmZmZmMDAwMDAwMDAwMDAwMDAwMDAwZmYxMTExZmYwMDAwMDAwMDAwMDAwMGYwMWIxMTExYjEwZjAwMDAwMDAwMDAwMGYwMTExMTExMTEwZjAwMDAwMDAwMDAwMGRmMTExMTExMTFmZDAwMDAwMDAwMDAwMGRmMWQxMTExZDFmZDAwMDAwMDAwMDAwMGJmZGQxMTExZGRmZDAwMDAwMDAwMDAwMGNmYmRkZmZkZGJmYjAwMDAwMDAwMDAwMGYwY2IxZmYxYmNmZjBmMDAwMDAwMDAwMGYwYmYxMTExY2JiZmZjMDAwMDAwMDAwMDAwY2ZiZGIxZmRiYmZiMDAwMDAwMDAwMGYwZmZmZmZmZmZjZjBmMDAwMDAwMDBmMGJjYjFmY2ZmZmYwMDAwMDAwMDAwMDBmMGIxYjFmMWZmMGYwMDAwMDAwMDAwMDAwMGZmZmIwZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBmZmZmMDAwMDAwMDAwMDAwMDAwMDAwZmYxMTExZmYwMDAwMDAwMDAwMDAwMGYwMWIxMTExYjEwZjAwMDAwMDAwMDAwMGYwMTExMTExMTEwZjAwMDAwMDAwMDAwMGRmMTExMTExMTFmZDAwMDAwMDAwMDAwMGRmMTExMTExMTFmZDAwMDAwMDAwMDAwMGRmZGQxMTExZGRmZDAwMDAwMDAwMDAwMGJmYmRkZmZkZGJmYjAwMDAwMDAwMDAwMGNmY2QxZmYxZGNmYzAwMDAwMDAwMDAwMGYwMWIxMTExYjEwZjAwMDAwMDAwMDAwMGZmY2ZiZGIxZmRmZjBmMDAwMDAwMDBjZjExYzFmYmZiMWMxMWZjMDAwMDAwMDAxZjFiMWJmZmZmYjFiMWYxMDAwMDAwMDBiZmJmZmZmZmZmZmJmYmZiMDAwMDAwMDAwMDAwZjBmZmZmMGYwMDAwMDAwMDAwMDAwMDAwMDBmMGZmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"displayName\": \"ghost throw\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}"},{"type":"added","filename":"images.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myImages {\n\n    helpers._registerFactory(\"image\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"image1\":\n            case \"ghost\":return img`\n........................\n........................\n........................\n........................\n..........ffff..........\n........ff1111ff........\n.......fb111111bf.......\n.......f11111111f.......\n......fd11111111df......\n......fd11111111df......\n......fddd1111dddf......\n......fbdbfddfbdbf......\n......fcdcf11fcdcf......\n.......fb111111bf.......\n......fffcdb1bdffff.....\n....fc111cbfbfc111cf....\n....f1b1b1ffff1b1b1f....\n....fbfbffffffbfbfbf....\n.........ffffff.........\n...........fff..........\n........................\n........................\n........................\n........................\n`;\n            case \"image2\":\n            case \"projectile\":return img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . 6 6 . . . . . . . \n. . . . . . 6 9 9 6 . . . . . . \n. . . . . . 8 9 9 8 . . . . . . \n. . . . . . . 8 8 . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`;\n            case \"image3\":\n            case \"bonus\":return img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . a a a a . . . . . . \n. . . . . a a a a a a . . . . . \n. . . . a a a a a 1 a a . . . . \n. . . a a 1 a a 1 1 a a a . . . \n. . . a 1 1 1 a a 1 a a a . . . \n. . . a a 1 a a a 1 a a a . . . \n. . . a a a a a a 1 a a a . . . \n. . . . a a a a a 1 a a . . . . \n. . . . . a a a a a a . . . . . \n. . . . . . a a a a . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`;\n            case \"image4\":\n            case \"randomiser\":return img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . 3 3 3 3 . . . . . . \n. . . . 3 3 3 3 3 3 3 3 . . . . \n. . . 3 a a a 3 3 a a a 3 . . . \n. . . 3 a a 3 3 3 3 a a 3 . . . \n. . 3 3 a 3 a 3 3 a 3 a 3 3 . . \n. . 3 3 3 3 3 a a 3 3 3 3 3 . . \n. . 3 3 3 3 3 a a 3 3 3 3 3 . . \n. . 3 3 a 3 a 3 3 a 3 a 3 3 . . \n. . . 3 a a 3 3 3 3 a a 3 . . . \n. . . 3 a a a 3 3 a a a 3 . . . \n. . . . 3 3 3 3 3 3 3 3 . . . . \n. . . . . . 3 3 3 3 . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`;\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"animation\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"ghost throw\":\n            case \"anim1\":return [img`\n........................\n........................\n........................\n........................\n........................\n..........ffff..........\n........ff1111ff........\n.......fb111111bf.......\n.....fffc1111111f.......\n...fc111cd1111111f......\n...f1b1b1b1111dddf......\n...fbfbffcf11fcddf......\n......fcf111111bbf......\n.......ccbdb1b1fcf......\n.......fffbfbfdff.......\n........ffffffff........\n........fffffffffff.....\n.........fffffc111cf....\n.........fffff1b1b1f....\n..........ffffbfbfbf....\n...........ffff.........\n........................\n........................\n........................\n`, img`\n........................\n........................\n........................\n........................\n........................\n..........ffff..........\n........ff1111ff........\n.......fb111111bf.......\n.......f11111111f.......\n......fd11111111df......\n....7.fd11111111df......\n...7..fd11111111df......\n...7..fd11111111df......\n...7..fddd1111dddff.....\n...77.fbdbfddfbdbfcf....\n...777fcdcf11fcdcfbf....\n....77fffbdb1bdffcf.....\n....fcb1bcffffff........\n....f1c1c1ffffff........\n....fdfdfdfffff.........\n.....f.f.f..............\n........................\n........................\n........................\n`, img`\n........................\n........................\n........................\n........................\n..........ffff..........\n........ff1111ff........\n.......fb111111bf.......\n.......f11111111f.......\n......fd111111111f......\n......fd11111111df......\n......fd11111111df......\n......fcdd1111ddcff.....\n.......fbcf11fcbfbbf....\n.......ffbdb1bdffff.....\n........fcbfbfdf........\n........ffffffff........\n......ffffffffff........\n.....fcb1bcffff.........\n......ffbff.............\n........................\n........................\n........................\n........................\n........................\n`, img`\n........................\n........................\n........................\n........................\n..........ffff..........\n........ff1111ff........\n.......fb111111bf.......\n.......f11111111f.......\n......fd11111111df......\n......fdd111111ddf......\n......fbdd1111dddf......\n......fcdbfddfbdbf......\n.......fbcf11fcbfff.....\n.......ffb1111bcfbcf....\n........fcdb1bdfbbbf....\n.......ffffffffffcf.....\n.....fcb1bcfffff........\n.....f1b1b1ffff.........\n......ffbff.............\n........................\n........................\n........................\n........................\n........................\n`, img`\n........................\n........................\n........................\n........................\n..........ffff..........\n........ff1111ff........\n.......fb111111bf.......\n.......f11111111f.......\n......fd11111111df......\n......fd11111111df......\n......fddd1111dddf......\n......fbdbfddfbdbf......\n......fcdcf11fcdcf......\n.......fb111111bf.......\n......fffcdb1bdffff.....\n....fc111cbfbfc111cf....\n....f1b1b1ffff1b1b1f....\n....fbfbffffffbfbfbf....\n.........ffffff.........\n...........fff..........\n........................\n........................\n........................\n........................\n`];\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"song\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"},{"type":"added","filename":"main.py","value":"@namespace\nclass SpriteKind:\n    cursor = SpriteKind.create()\n    # GM1\n    path = SpriteKind.create()\n    # /GM1\n    # BH6\n    randomiser = SpriteKind.create()\n    # /BH6\n\n# vars\nproj_count = 10\nproj_speed = 200\nlives = 3\n# GM1\ndraw_path = False\n# /GM1\n\n# sprites\nghost = sprites.create(assets.image(\"ghost\"), SpriteKind.player)\nghost.bottom = 120\nghost.set_stay_in_screen(True)\npointer = sprites.create(image.create(1, 1), SpriteKind.cursor)\npointer.image.fill(1)\npointer.set_flag(SpriteFlag.INVISIBLE, True)\n\n# aim sprite\n# GM1\n# aim_sprite = sprites.create(image.create(150, 150)) # REMOVE\n# aim_sprite.image.fill_rect(74, 74, 75, 2, 2) # REMOVE\naim_sprite = sprites.create(image.create(2, 2))\naim_sprite.image.fill(1)\naim_sprite.set_flag(SpriteFlag.GHOST_THROUGH_WALLS, True)\n# /GM1\naim_sprite.z = -1\naim_sprite.set_flag(SpriteFlag.INVISIBLE, True)\n\n# BH3\n# status bar\none_shot_active = False\npower_up_bar = statusbars.create(160, 2, StatusBarKind.magic)\npower_up_bar.bottom = 120\npower_up_bar.value = 0\n# /BH3\n\n# setup\nmusic.set_volume(20)\ntiles.set_current_tilemap(assets.tilemap(\"level\"))\nfor i in range(3):\n    cycle_blocks()\n\ndef make_lives_text(location):\n    block_life = tiles.read_data_number(location, \"life\")\n    lives_text = textsprite.create(str(block_life))\n    tiles.place_on_tile(lives_text, location)\n    tiles.set_data_sprite(location, \"text\", lives_text)\n\ndef spawn_block(location):\n    tiles.set_tile_at(location, assets.tile(\"block\"))\n    tiles.set_wall_at(location, True)\n    block_life = 3 + randint(-2, 2)\n    tiles.set_data_number(location, \"life\", block_life)\n    make_lives_text(location)\n\n# BH2\ndef spawn_bonus_ball(location):\n    bonus_ball = sprites.create(assets.image(\"bonus\"), SpriteKind.food)\n    tiles.place_on_tile(bonus_ball, location)\n    bonus_ball.set_flag(SpriteFlag.AUTO_DESTROY, True)\n# /BH2\n\n# GM2\ndef spawn_special_block(location):\n    if randint(1, 2) == 1:\n        tiles.set_tile_at(location, assets.tile(\"horizontal\"))\n    else:\n        tiles.set_tile_at(location, assets.tile(\"vertical\"))\n    tiles.set_wall_at(location, True)\n    block_life = 3 + randint(-2, 2)\n    tiles.set_data_number(location, \"life\", block_life)\n    make_lives_text(location)\n# /GM2\n\n# BH4\ndef spawn_unbreakable_block(location):\n    tiles.set_tile_at(location, assets.tile(\"unbreakable\"))\n    tiles.set_wall_at(location, True)\n# /BH4\n\n# BH6\ndef spawn_randomiser(location):\n    randomiser = sprites.create(assets.image(\"randomiser\"), SpriteKind.randomiser)\n    tiles.place_on_tile(randomiser, location)\n    randomiser.set_flag(SpriteFlag.AUTO_DESTROY, True)\n# /BH6\n\ndef spawn_row():\n    for col in range(10):\n        if randint(1, 5) > 1:\n            spawn_block(tiles.get_tile_location(col, 0))\n        # BH2\n        elif randint(1, 5) == 1:\n            spawn_bonus_ball(tiles.get_tile_location(col, 0))\n        # /BH2\n        # GM2\n        elif randint(1, 5) == 1:\n            spawn_special_block(tiles.get_tile_location(col, 0))\n        # /GM2\n        # BH4\n        elif randint(1, 5) == 1:\n            spawn_unbreakable_block(tiles.get_tile_location(col, 0))\n        # /BH4\n        # BH6 \n        elif randint(1, 5) == 1:\n            spawn_randomiser(tiles.get_tile_location(col, 0))\n        # /BH6\n    music.knock.play()\n\ndef move_block(location: tiles.Location):\n    new_location = tiles.get_tile_location(location.column, location.row + 1)\n    block_image = tiles.get_tile_image(location)\n    tiles.set_tile_at(new_location, block_image)\n    tiles.set_wall_at(new_location, True)\n    tiles.set_tile_at(location, image.create(16, 16))\n    tiles.set_wall_at(location, False)\n    tiles.move_data(location, new_location, True)\n\ndef move_row():\n    all_blocks = tilesAdvanced.get_all_tiles_where_wall_is(True)\n    all_blocks.reverse()\n    for location in all_blocks:\n        if location.bottom > ghost.top - 16:\n            # BH4\n            if tiles.tile_at_location_equals(location, assets.tile(\"unbreakable\")):\n                tiles.set_tile_at(location, image.create(16, 16))\n                tiles.set_wall_at(location, False)\n                continue\n            # /BH4\n            game.over(False)\n        move_block(location)\n    # BH2\n    for ball in sprites.all_of_kind(SpriteKind.food):\n        ball.y += 16\n    # /BH2\n    # BH6\n    for randomiser in sprites.all_of_kind(SpriteKind.randomiser):\n        randomiser.y += 16\n    # /BH2\n\ndef cycle_blocks():\n    move_row()\n    spawn_row()\n\n# BH3\ndef activate_power_up():\n    global one_shot_active\n    if power_up_bar.value >= power_up_bar.max:\n        one_shot_active = True\n        power_up_bar.value = 0\ncontroller.A.on_event(ControllerButtonEvent.PRESSED, activate_power_up)\n# /BH3\n\ndef left_mouse_press(x, y):\n    # GM1\n    # aim_sprite.set_flag(SpriteFlag.INVISIBLE, False) # REMOVE\n    # aim_sprite.x = ghost.x # REMOVE\n    # aim_sprite.y = ghost.y # REMOVE\n    global draw_path\n    draw_path = True\n    # --GM1\nbrowserEvents.mouse_left.on_event(browserEvents.MouseButtonEvent.PRESSED, left_mouse_press)\n\ndef left_mouse_release(x, y):\n    # GM1\n    global draw_path\n    draw_path = False\n    aim_sprite.set_flag(SpriteFlag.INVISIBLE, True) # REMOVE\n    # /GM1\n    if len(sprites.all_of_kind(SpriteKind.projectile)) < 1:\n        timer.background(fire)\n        animation.run_image_animation(ghost, assets.animation(\"ghost throw\"), 100, False)\nbrowserEvents.mouse_left.on_event(browserEvents.MouseButtonEvent.RELEASED, left_mouse_release)\n\ndef fire():\n    fire_angle = spriteutils.angle_from(ghost, pointer)\n    for i in range(proj_count):\n        proj = sprites.create(assets.image(\"projectile\"), SpriteKind.projectile)\n        proj.set_position(ghost.x, ghost.y)\n        proj.set_bounce_on_wall(True)\n        spriteutils.set_velocity_at_angle(proj, fire_angle, proj_speed)\n        # BH3\n        if one_shot_active:\n            proj.start_effect(effects.fire)\n        # /BH3\n        pause(50)\n\n# BH2\ndef collect_bonus_ball(proj, ball):\n    global proj_count\n    proj_count += 1\n    ball.destroy()\nsprites.on_overlap(SpriteKind.projectile, SpriteKind.food, collect_bonus_ball)\n# /BH2\n\n# BH6\ndef hit_randomiser(proj, randomiser):\n    angle = spriteutils.degrees_to_radians(randint(1, 360))\n    spriteutils.set_velocity_at_angle(proj, angle, proj_speed)\n    spriteutils.place_angle_from(proj, angle, 5, randomiser)\nsprites.on_overlap(SpriteKind.projectile, SpriteKind.randomiser, hit_randomiser)\n# /BH6\n\n# GM2\ndef horizontal_destroyer_hit(location: tiles.Location):\n    for block in tilesAdvanced.get_all_tiles_where_wall_is(True):\n        if block.row == location.row:\n            block_damage(block)\n            effect_sprite = sprites.create(image.create(160, 2))\n            effect_sprite.image.fill(9)\n            effect_sprite.set_position(80, block.y)\n            effect_sprite.lifespan = 500\n# /GM2\n\n# GM2\ndef vertical_destroyer_hit(location: tiles.Location):\n    for block in tilesAdvanced.get_all_tiles_where_wall_is(True):\n        if block.col == location.col:\n            block_damage(block)\n            effect_sprite = sprites.create(image.create(2, 120))\n            effect_sprite.image.fill(9)\n            effect_sprite.set_position(block.x, 60)\n            effect_sprite.lifespan = 500\n# /GM2\n\ndef block_damage(location):\n    if tiles.tile_at_location_equals(location, assets.tile(\"unbreakable\")):\n        return\n    new_life = tiles.read_data_number(location, \"life\") - 1\n    tiles.read_data_sprite(location, \"text\").destroy()\n    # BH3\n    if new_life < 1 or one_shot_active: # EDIT\n    # /BH3\n        tiles.set_tile_at(location, image.create(16, 16))\n        tiles.set_wall_at(location, False)\n        info.change_score_by(10)\n        # BH1\n        scene.camera_shake(4, 500)\n        music.big_crash.play()\n        # /BH1\n    else:\n        tiles.set_data_number(location, \"life\", new_life)\n        make_lives_text(location)\n        # BH1\n        music.footstep.play()\n        effect_sprite = sprites.create(image.create(16, 16))\n        effect_sprite.image.fill(2)\n        tiles.place_on_tile(effect_sprite, location)\n        effect_sprite.set_flag(SpriteFlag.INVISIBLE, True)\n        effect_sprite.start_effect(effects.ashes, 200)\n        effect_sprite.lifespan = 200\n        # /BH1\n        # BH3\n        power_up_bar.value +=1\n        # /BH3\n\ndef wall_hit(proj, location):\n    # GM2\n    if tiles.tile_at_location_equals(location, assets.tile(\"horizontal\")):\n        horizontal_destroyer_hit(location)\n    if tiles.tile_at_location_equals(location, assets.tile(\"vertical\")):\n        vertical_destroyer_hit(location)\n    # /GM2\n    if tiles.tile_at_location_equals(location, assets.tile(\"block\")):\n        block_damage(location)\n    if proj.y > ghost.y:\n        if len(sprites.all_of_kind(SpriteKind.projectile)) == proj_count:\n            ghost.x = proj.x\n        proj.destroy()\nscene.on_hit_wall(SpriteKind.projectile, wall_hit)\n\n# GM1 REMOVE\ndef aim():\n    angle = spriteutils.radians_to_degrees(spriteutils.angle_from(ghost, pointer))\n    transformSprites.rotate_sprite(aim_sprite, angle)\n# /GM1\n\n# GM1\ndef path():\n    aim_sprite.set_position(ghost.x, ghost.y)\n    direction = spriteutils.angle_from(ghost, pointer)\n    x_vector = Math.cos(direction)\n    y_vector = Math.sin(direction)\n    dot = image.create(2, 2)\n    dot.fill(1)\n    for path_length in range(10):\n        dot_sprite = sprites.create(dot, SpriteKind.path)\n        dot_sprite.set_position(aim_sprite.x, aim_sprite.y)\n        for step_length in range(15):\n            aim_sprite.x += x_vector\n            if tiles.tile_at_location_is_wall(aim_sprite.tilemap_location()):\n                aim_sprite.x -= x_vector\n                x_vector *= -1\n            aim_sprite.y += y_vector\n            if tiles.tile_at_location_is_wall(aim_sprite.tilemap_location()):\n                aim_sprite.y -= y_vector\n                y_vector *= -1\n# --GH1\n\ndef trigger_game_loop():\n    # BH3 and BH5\n    global one_shot_active, lives # EDIT\n    # /BH3 and /BH5\n    if len(tiles.get_tiles_by_type(assets.tile(\"block\"))) < 1:\n        game.over(True)\n    if len(sprites.all_of_kind(SpriteKind.projectile)) < 1:\n        # BH3\n        one_shot_active = False\n        # /BH3\n        # BH5\n        if randint(1, 1) == 1:\n            lives += 1\n        # /BH5\n        cycle_blocks()\nsprites.on_destroyed(SpriteKind.projectile, trigger_game_loop)\n\ndef tick():\n    pointer.x = browserEvents.mouse_x()\n    pointer.y = browserEvents.mouse_y()\n    if pointer.y >= ghost.y - 5:\n        pointer.y = ghost.y - 5\n    # GM1\n    # aim() # REMOVE\n    if len(sprites.all_of_kind(SpriteKind.path)) > 0:\n        sprites.destroy_all_sprites_of_kind(SpriteKind.path)\n    if draw_path:\n        path()\n    # /GM1\ngame.on_update(tick)\n"},{"type":"added","filename":"tilemap.g.jres","value":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAD//////////y8iIiIiIiLyLyIiIiIiIvIvIiIiIiIi8i8iIiIiIiLyLyIiIiIiIvIvIiIiIiIi8i8iIiIiIiLyLyIiIiIiIvIvIiIiIiIi8i8iIiIiIiLyLyIiIiIiIvIvIiIiIiIi8i8iIiIiIiLyLyIiIiIiIvL//////////w==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"block\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"tile3\": {\n        \"data\": \"hwQQABAAAAD//////////y8iIiIiIiLyLyIiIiIvIvIvIiIiIvIi8i8iIiIiIi/yL/////////IvIiIiIiIv8i8i8iIi8iLyLyIvIiIvIvIv8iIiIiIi8i/////////yL/IiIiIiIvIvIi8iIiIi8i8i8iIiIiLyLyIiIiIiIvL//////////w==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"vertical\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAAD//////////y8iIiIiIiLyLyLyIiIvIvIvIv8vIi8i8i/y8vIiLyLyLy/yIi8vIvIvIvIiIi8i8i8i8iIiLyLyLyLyIiIvIvIvIvIiIi8i8i8i8vIiL/LyLyLyIi8vL/IvIvIi8v8i8i8i8iIiLyLyLyIiIiIiIvL//////////w==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"horizontal\"\n    },\n    \"tile4\": {\n        \"data\": \"hwQQABAAAAD//////////7+7u7u7u7v7v7u7u7u7u/u/y7u7u7u8+7+7u7u7u7v7v7u7u7u7u/u/u7u7u7u7+7+7u7u7u7v7v7u7u7u7u/u/u7u7u7u7+7+7u7u7u7v7v7u7u7u7u/u/y7u7u7u8+7+7u7u7u7v7v7u7u7u7u/v//////////w==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"unbreakable\"\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}"},{"type":"added","filename":"tilemap.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myTiles {\n    //% fixedInstance jres blockIdentity=images._tile\n    export const tile1 = image.ofBuffer(hex``);\n    //% fixedInstance jres blockIdentity=images._tile\n    export const transparency16 = image.ofBuffer(hex``);\n    //% fixedInstance jres blockIdentity=images._tile\n    export const tile3 = image.ofBuffer(hex``);\n    //% fixedInstance jres blockIdentity=images._tile\n    export const tile2 = image.ofBuffer(hex``);\n    //% fixedInstance jres blockIdentity=images._tile\n    export const tile4 = image.ofBuffer(hex``);\n\n    helpers._registerFactory(\"tilemap\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"level\":\n            case \"level1\":return tiles.createTilemap(hex`0a0008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, img`\n. . . . . . . . . . \n. . . . . . . . . . \n. . . . . . . . . . \n. . . . . . . . . . \n. . . . . . . . . . \n. . . . . . . . . . \n. . . . . . . . . . \n. . . . . . . . . . \n`, [myTiles.transparency16], TileScale.Sixteen);\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"tile\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"block\":\n            case \"tile1\":return tile1;\n            case \"transparency16\":return transparency16;\n            case \"vertical\":\n            case \"tile3\":return tile3;\n            case \"horizontal\":\n            case \"tile2\":return tile2;\n            case \"unbreakable\":\n            case \"tile4\":return tile4;\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"}]},{"timestamp":1719571912699,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"kADP?+`VmhR+h{s:f~Z5\""],[0," x=\""]],"start1":100,"start2":100,"length1":34,"length2":8}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"create()"],[1,"\n    # GM1\n    path = SpriteKind.create()\n    # /GM1\n    # BH6\n    randomiser = SpriteKind.create()\n    # /BH6"],[0,"\n\n# vars"]],"start1":53,"start2":53,"length1":16,"length2":126},{"diffs":[[0,"ives = 3"],[1,"\n# GM1\ndraw_path = False\n# /GM1"],[0,"\n\n# spri"]],"start1":214,"start2":214,"length1":16,"length2":47},{"diffs":[[0," sprite\n"],[1,"# GM1\n# "],[0,"aim_spri"]],"start1":517,"start2":517,"length1":16,"length2":24},{"diffs":[[0,"0, 150))"],[-1,"\n"],[1," # REMOVE\n# "],[0,"aim_spri"]],"start1":576,"start2":576,"length1":17,"length2":28},{"diffs":[[0,", 2)"],[-1,"\naim_sprite.z = -1\naim_sprite.set_flag(SpriteFlag.INVISIBLE, True)"],[1," # REMOVE\naim_sprite = sprites.create(image.create(2, 2))\naim_sprite.image.fill(1)\naim_sprite.set_flag(SpriteFlag.GHOST_THROUGH_WALLS, True)\n# /GM1\naim_sprite.z = -1\naim_sprite.set_flag(SpriteFlag.INVISIBLE, True)\n\n# BH3\n# status bar\none_shot_active = False\npower_up_bar = statusbars.create(160, 2, StatusBarKind.magic)\npower_up_bar.bottom = 120\npower_up_bar.value = 0\n# /BH3"],[0,"\n\n# "]],"start1":636,"start2":636,"length1":74,"length2":383},{"diffs":[[0,"n)\n\n"],[-1,"def spawn_row():\n    for col in range(10):\n        if randint(1, 5) > 1:\n            spawn_block(tiles.get_tile_location(col, 0))\n    music.knock.play()\n\ndef move_block(location: tiles.Location):\n    new_location = tiles.get_tile_location(location.column, location.row + 1)\n    block_image = tiles.get_tile_image(location)\n    tiles.set_tile_at(new_location, block_image)\n    tiles.set_wall_at(new_location, True)\n    tiles.set_tile_at(location, image.create(16, 16))\n    tiles.set_wall_at(location, False)\n    tiles.move_data(location, new_location, True)\n\ndef move_row():\n    all_blocks = tilesAdvanced.get_all_tiles_where_wall_is(True)\n    all_blocks.reverse()\n    for location in all_blocks:\n        if location.bottom > ghost.top - 16:\n            game.over(False)\n        move_block(location)\n\ndef cycle_blocks():\n    move_row()\n    spawn_row()"],[1,"# BH2\ndef spawn_bonus_ball(location):\n    bonus_ball = sprites.create(assets.image(\"bonus\"), SpriteKind.food)\n    tiles.place_on_tile(bonus_ball, location)\n    bonus_ball.set_flag(SpriteFlag.AUTO_DESTROY, True)\n# /BH2\n\n# GM2\ndef spawn_special_block(location):\n    if randint(1, 2) == 1:\n        tiles.set_tile_at(location, assets.tile(\"horizontal\"))\n    else:\n        tiles.set_tile_at(location, assets.tile(\"vertical\"))\n    tiles.set_wall_at(location, True)\n    block_life = 3 + randint(-2, 2)\n    tiles.set_data_number(location, \"life\", block_life)\n    make_lives_text(location)\n# /GM2\n\n# BH4\ndef spawn_unbreakable_block(location):\n    tiles.set_tile_at(location, assets.tile(\"unbreakable\"))\n    tiles.set_wall_at(location, True)\n# /BH4\n\n# BH6\ndef spawn_randomiser(location):\n    randomiser = sprites.create(assets.image(\"randomiser\"), SpriteKind.randomiser)\n    tiles.place_on_tile(randomiser, location)\n    randomiser.set_flag(SpriteFlag.AUTO_DESTROY, True)\n# /BH6\n\ndef spawn_row():\n    for col in range(10):\n        if randint(1, 5) > 1:\n            spawn_block(tiles.get_tile_location(col, 0))\n        # BH2\n        elif randint(1, 5) == 1:\n            spawn_bonus_ball(tiles.get_tile_location(col, 0))\n        # /BH2\n        # GM2\n        elif randint(1, 5) == 1:\n            spawn_special_block(tiles.get_tile_location(col, 0))\n        # /GM2\n        # BH4\n        elif randint(1, 5) == 1:\n            spawn_unbreakable_block(tiles.get_tile_location(col, 0))\n        # /BH4\n        # BH6 \n        elif randint(1, 5) == 1:\n            spawn_randomiser(tiles.get_tile_location(col, 0))\n        # /BH6\n    music.knock.play()\n\ndef move_block(location: tiles.Location):\n    new_location = tiles.get_tile_location(location.column, location.row + 1)\n    block_image = tiles.get_tile_image(location)\n    tiles.set_tile_at(new_location, block_image)\n    tiles.set_wall_at(new_location, True)\n    tiles.set_tile_at(location, image.create(16, 16))\n    tiles.set_wall_at(location, False)\n    tiles.move_data(location, new_location, True)\n\ndef move_row():\n    all_blocks = tilesAdvanced.get_all_tiles_where_wall_is(True)\n    all_blocks.reverse()\n    for location in all_blocks:\n        if location.bottom > ghost.top - 16:\n            # BH4\n            if tiles.tile_at_location_equals(location, assets.tile(\"unbreakable\")):\n                tiles.set_tile_at(location, image.create(16, 16))\n                tiles.set_wall_at(location, False)\n                continue\n            # /BH4\n            game.over(False)\n        move_block(location)\n    # BH2\n    for ball in sprites.all_of_kind(SpriteKind.food):\n        ball.y += 16\n    # /BH2\n    # BH6\n    for randomiser in sprites.all_of_kind(SpriteKind.randomiser):\n        randomiser.y += 16\n    # /BH2\n\ndef cycle_blocks():\n    move_row()\n    spawn_row()\n\n# BH3\ndef activate_power_up():\n    global one_shot_active\n    if power_up_bar.value >= power_up_bar.max:\n        one_shot_active = True\n        power_up_bar.value = 0\ncontroller.A.on_event(ControllerButtonEvent.PRESSED, activate_power_up)\n# /BH3"],[0,"\n\nde"]],"start1":1618,"start2":1618,"length1":858,"length2":3055},{"diffs":[[0,"press(x, y):\n   "],[1," # GM1\n    #"],[0," aim_sprite.set_"]],"start1":4686,"start2":4686,"length1":32,"length2":44},{"diffs":[[0,", False)"],[1," # REMOVE"],[0,"\n   "],[1," #"],[0," aim_spr"]],"start1":4755,"start2":4755,"length1":20,"length2":31},{"diffs":[[0," ghost.x"],[1," # REMOVE"],[0,"\n   "],[1," #"],[0," aim_spr"]],"start1":4793,"start2":4793,"length1":20,"length2":31},{"diffs":[[0," ghost.y"],[1," # REMOVE\n    global draw_path\n    draw_path = True\n    # --GM1"],[0,"\nbrowser"]],"start1":4831,"start2":4831,"length1":16,"length2":79},{"diffs":[[0,"ease(x, y):\n"],[1,"    # GM1\n    global draw_path\n    draw_path = False\n"],[0,"    aim_spri"]],"start1":5014,"start2":5014,"length1":24,"length2":77},{"diffs":[[0,"SIBLE, True)"],[1," # REMOVE\n    # /GM1"],[0,"\n    if len("]],"start1":5118,"start2":5118,"length1":24,"length2":44},{"diffs":[[0,"    "],[-1,"pause(50)"],[1,"# BH3\n        if one_shot_active:\n            proj.start_effect(effects.fire)\n        # /BH3\n        pause(50)\n\n# BH2\ndef collect_bonus_ball(proj, ball):\n    global proj_count\n    proj_count += 1\n    ball.destroy()\nsprites.on_overlap(SpriteKind.projectile, SpriteKind.food, collect_bonus_ball)\n# /BH2\n\n# BH6\ndef hit_randomiser(proj, randomiser):\n    angle = spriteutils.degrees_to_radians(randint(1, 360))\n    spriteutils.set_velocity_at_angle(proj, angle, proj_speed)\n    spriteutils.place_angle_from(proj, angle, 5, randomiser)\nsprites.on_overlap(SpriteKind.projectile, SpriteKind.randomiser, hit_randomiser)\n# /BH6\n\n# GM2\ndef horizontal_destroyer_hit(location: tiles.Location):\n    for block in tilesAdvanced.get_all_tiles_where_wall_is(True):\n        if block.row == location.row:\n            block_damage(block)\n            effect_sprite = sprites.create(image.create(160, 2))\n            effect_sprite.image.fill(9)\n            effect_sprite.set_position(80, block.y)\n            effect_sprite.lifespan = 500\n# /GM2\n\n# GM2\ndef vertical_destroyer_hit(location: tiles.Location):\n    for block in tilesAdvanced.get_all_tiles_where_wall_is(True):\n        if block.col == location.col:\n            block_damage(block)\n            effect_sprite = sprites.create(image.create(2, 120))\n            effect_sprite.image.fill(9)\n            effect_sprite.set_position(block.x, 60)\n            effect_sprite.lifespan = 500\n# /GM2"],[0,"\n\nde"]],"start1":5767,"start2":5767,"length1":17,"length2":1431},{"diffs":[[0,").destroy()\n"],[1,"    # BH3\n"],[0,"    if new_l"]],"start1":7418,"start2":7418,"length1":24,"length2":34},{"diffs":[[0,"new_life < 1"],[-1,":"],[1," or one_shot_active: # EDIT\n    # /BH3"],[0,"\n        til"]],"start1":7447,"start2":7447,"length1":25,"length2":62},{"diffs":[[0,"_by(10)\n"],[1,"        # BH1\n        scene.camera_shake(4, 500)\n        music.big_crash.play()\n        # /BH1\n"],[0,"    else"]],"start1":7624,"start2":7624,"length1":16,"length2":111},{"diffs":[[0,"on)\n"],[-1,"\ndef wall_hit(proj, location):"],[1,"        # BH1\n        music.footstep.play()\n        effect_sprite = sprites.create(image.create(16, 16))\n        effect_sprite.image.fill(2)\n        tiles.place_on_tile(effect_sprite, location)\n        effect_sprite.set_flag(SpriteFlag.INVISIBLE, True)\n        effect_sprite.start_effect(effects.ashes, 200)\n        effect_sprite.lifespan = 200\n        # /BH1\n        # BH3\n        power_up_bar.value +=1\n        # /BH3\n\ndef wall_hit(proj, location):\n    # GM2\n    if tiles.tile_at_location_equals(location, assets.tile(\"horizontal\")):\n        horizontal_destroyer_hit(location)\n    if tiles.tile_at_location_equals(location, assets.tile(\"vertical\")):\n        vertical_destroyer_hit(location)\n    # /GM2"],[0,"\n   "]],"start1":7825,"start2":7825,"length1":38,"length2":711},{"diffs":[[0," wall_hit)\n\n"],[1,"# GM1 REMOVE\n"],[0,"def aim():\n "]],"start1":8825,"start2":8825,"length1":24,"length2":37},{"diffs":[[0,"le)\n"],[-1,"\ndef trigger_game_loop():"],[1,"# /GM1\n\n# GM1\ndef path():\n    aim_sprite.set_position(ghost.x, ghost.y)\n    direction = spriteutils.angle_from(ghost, pointer)\n    x_vector = Math.cos(direction)\n    y_vector = Math.sin(direction)\n    dot = image.create(2, 2)\n    dot.fill(1)\n    for path_length in range(10):\n        dot_sprite = sprites.create(dot, SpriteKind.path)\n        dot_sprite.set_position(aim_sprite.x, aim_sprite.y)\n        for step_length in range(15):\n            aim_sprite.x += x_vector\n            if tiles.tile_at_location_is_wall(aim_sprite.tilemap_location()):\n                aim_sprite.x -= x_vector\n                x_vector *= -1\n            aim_sprite.y += y_vector\n            if tiles.tile_at_location_is_wall(aim_sprite.tilemap_location()):\n                aim_sprite.y -= y_vector\n                y_vector *= -1\n# --GH1\n\ndef trigger_game_loop():\n    # BH3 and BH5\n    global one_shot_active, lives # EDIT\n    # /BH3 and /BH5"],[0,"\n   "]],"start1":8994,"start2":8994,"length1":33,"length2":926},{"diffs":[[0,"ojectile)) < 1:\n"],[1,"        # BH3\n        one_shot_active = False\n        # /BH3\n        # BH5\n        if randint(1, 1) == 1:\n            lives += 1\n        # /BH5\n"],[0,"        cycle_bl"]],"start1":10048,"start2":10048,"length1":32,"length2":176},{"diffs":[[0,"- 5\n    "],[-1,"aim()"],[1,"# GM1\n    # aim() # REMOVE\n    if len(sprites.all_of_kind(SpriteKind.path)) > 0:\n        sprites.destroy_all_sprites_of_kind(SpriteKind.path)\n    if draw_path:\n        path()\n    # /GM1"],[0,"\ngame.on"]],"start1":10448,"start2":10448,"length1":21,"length2":201}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"reate()\n"],[-1,"}\n"],[1,"    //  GM1\n    export const path = SpriteKind.create()\n    //  /GM1\n    //  BH6\n    export const randomiser = SpriteKind.create()\n}\n\n//  /BH6"],[0,"\n//  var"]],"start1":76,"start2":76,"length1":18,"length2":158},{"diffs":[[0,"ves = 3\n"],[1,"//  GM1\nlet draw_path = false\n//  /GM1\n"],[0,"//  spri"]],"start1":283,"start2":283,"length1":16,"length2":55},{"diffs":[[0," sprite\n"],[-1,"let"],[1,"//  GM1\n// "],[0," aim_spr"]],"start1":597,"start2":597,"length1":19,"length2":27},{"diffs":[[0,"0, 150))"],[-1,"\n"],[1," # REMOVE\n//  "],[0,"aim_spri"]],"start1":660,"start2":660,"length1":17,"length2":30},{"diffs":[[0,"age.fill"],[-1,"R"],[1,"_r"],[0,"ect(74, "]],"start1":695,"start2":695,"length1":17,"length2":18},{"diffs":[[0,", 2)"],[-1,"\naim_sprite.z = -1\naim_sprite.setFlag(SpriteFlag.Invisible, true)"],[1," # REMOVE\nlet aim_sprite = sprites.create(image.create(2, 2))\naim_sprite.image.fill(1)\naim_sprite.setFlag(SpriteFlag.GhostThroughWalls, true)\n//  /GM1\naim_sprite.z = -1\naim_sprite.setFlag(SpriteFlag.Invisible, true)\n//  BH3\n//  status bar\nlet one_shot_active = false\nlet power_up_bar = statusbars.create(160, 2, StatusBarKind.Magic)\npower_up_bar.bottom = 120\npower_up_bar.value = 0\n//  /BH3"],[0,"\n// "]],"start1":722,"start2":722,"length1":73,"length2":398},{"diffs":[[0,"\n}\n\n"],[-1,"function spawn_row() {\n    for (let col = 0; col < 10; col++) {\n        if (randint(1, 5) > 1) {\n            spawn_block"],[1,"//  BH2\nfunction spawn_bonus_ball(location: any) {\n    let bonus_ball = sprites.create(assets.image`bonus`, SpriteKind.Food)\n    tiles.placeOnTile(bonus_ball, location)\n    bonus_ball.setFlag(SpriteFlag.AutoDestroy, true)\n}\n\n//  /BH2\n//  GM2\nfunction spawn_special_block(location: any) {\n    if (randint(1, 2) == 1) {\n        tiles.setTileAt(location, assets.tile`horizontal`)\n    } else {\n        tiles.setTileAt(location, assets.tile`vertical`)\n    }\n    \n    tiles.setWallAt(location, true)\n    let block_life = 3 + randint(-2, 2)\n    tiles.setDataNumber(location, \"life\", block_life)\n    make_lives_text(location)\n}\n\n//  /GM2\n//  BH4\nfunction spawn_unbreakable_block(location: any) {\n    tiles.setTileAt(location, assets.tile`unbreakable`)\n    tiles.setWallAt(location, true)\n}\n\n//  /BH4\n//  BH6\nfunction spawn_randomiser(location: any) {\n    let randomiser = sprites.create(assets.image`randomiser`, SpriteKind.randomiser)\n    tiles.placeOnTile(randomiser, location)\n    randomiser.setFlag(SpriteFlag.AutoDestroy, true)\n}\n\n//  /BH6\nfunction spawn_row() {\n    for (let col = 0; col < 10; col++) {\n        if (randint(1, 5) > 1) {\n            spawn_block(tiles.getTileLocation(col, 0))\n        } else if (randint(1, 5) == 1) {\n            //  BH2\n            spawn_bonus_ball(tiles.getTileLocation(col, 0))\n        } else if (randint(1, 5) == 1) {\n            //  /BH2\n            //  GM2\n            spawn_special_block(tiles.getTileLocation(col, 0))\n        } else if (randint(1, 5) == 1) {\n            //  /GM2\n            //  BH4\n            spawn_unbreakable_block(tiles.getTileLocation(col, 0))\n        } else if (randint(1, 5) == 1) {\n            //  /BH4\n            //  BH6 \n            spawn_randomiser"],[0,"(til"]],"start1":1747,"start2":1747,"length1":128,"length2":1723},{"diffs":[[0,"     \n    }\n"],[1,"    //  /BH6\n"],[0,"    music.kn"]],"start1":3511,"start2":3511,"length1":24,"length2":37},{"diffs":[[0,"    "],[-1,"game.over(false)\n        }\n        \n        move_block(location)\n    }\n}\n\nfunction cycle_blocks() {\n    move_row()\n    spawn_row()\n}\n"],[1,"//  BH4\n            if (tiles.tileAtLocationEquals(location, assets.tile`unbreakable`)) {\n                tiles.setTileAt(location, image.create(16, 16))\n                tiles.setWallAt(location, false)\n                continue\n            }\n            \n            //  /BH4\n            game.over(false)\n        }\n        \n        move_block(location)\n    }\n    //  BH2\n    for (let ball of sprites.allOfKind(SpriteKind.Food)) {\n        ball.y += 16\n    }\n    //  /BH2\n    //  BH6\n    for (let randomiser of sprites.allOfKind(SpriteKind.randomiser)) {\n        randomiser.y += 16\n    }\n}\n\n//  /BH2\nfunction cycle_blocks() {\n    move_row()\n    spawn_row()\n}\n\n//  BH3\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function activate_power_up() {\n    \n    if (power_up_bar.value >= power_up_bar.max) {\n        one_shot_active = true\n        power_up_bar.value = 0\n    }\n    \n})\n//  /BH3\n//  --GM1"],[0,"\nbro"]],"start1":4175,"start2":4175,"length1":141,"length2":906},{"diffs":[[0,"ny, y: any) {\n  "],[1,"  //  GM1\n    //"],[0,"  aim_sprite.set"]],"start1":5180,"start2":5180,"length1":32,"length2":48},{"diffs":[[0,"  aim_sprite.set"],[-1,"F"],[1,"_f"],[0,"lag(SpriteFlag.I"]],"start1":5212,"start2":5212,"length1":33,"length2":34},{"diffs":[[0,"ag.I"],[-1,"nvisible, f"],[1,"NVISIBLE, F"],[0,"alse)"],[-1,"\n  "],[1," # REMOVE\n    //"],[0,"  ai"]],"start1":5242,"start2":5242,"length1":27,"length2":40},{"diffs":[[0," ghost.x"],[1," # REMOVE"],[0,"\n  "],[1,"  //"],[0,"  aim_sp"]],"start1":5294,"start2":5294,"length1":19,"length2":32},{"diffs":[[0," ghost.y"],[1," # REMOVE\n    \n    draw_path = true"],[0,"\n})\nbrow"]],"start1":5334,"start2":5334,"length1":16,"length2":51},{"diffs":[[0,", y: any) {\n"],[1,"    //  GM1\n    \n    draw_path = false\n"],[0,"    aim_spri"]],"start1":5488,"start2":5488,"length1":24,"length2":63},{"diffs":[[0,"ible, true)\n"],[1,"    //  REMOVE\n    //  /GM1\n"],[0,"    if (spri"]],"start1":5578,"start2":5578,"length1":24,"length2":52},{"diffs":[[0,"    "],[-1,"pause(50)\n            }\n        })\n        animation.runImageAnimation(ghost, assets.animation`ghost throw`, 100, false)\n    }\n    \n})"],[1,"//  BH3\n                if (one_shot_active) {\n                    proj.startEffect(effects.fire)\n                }\n                \n                //  /BH3\n                pause(50)\n            }\n        })\n        animation.runImageAnimation(ghost, assets.animation`ghost throw`, 100, false)\n    }\n    \n})\n//  BH2\nsprites.onOverlap(SpriteKind.Projectile, SpriteKind.Food, function collect_bonus_ball(proj: Sprite, ball: Sprite) {\n    \n    proj_count += 1\n    ball.destroy()\n})\n//  /BH2\n//  BH6\nsprites.onOverlap(SpriteKind.Projectile, SpriteKind.randomiser, function hit_randomiser(proj: Sprite, randomiser: Sprite) {\n    let angle = spriteutils.degreesToRadians(randint(1, 360))\n    spriteutils.setVelocityAtAngle(proj, angle, proj_speed)\n    spriteutils.placeAngleFrom(proj, angle, 5, randomiser)\n})\n//  /BH6\n//  GM2\nfunction horizontal_destroyer_hit(location: tiles.Location) {\n    let effect_sprite: Sprite;\n    for (let block of tilesAdvanced.getAllTilesWhereWallIs(true)) {\n        if (block.row == location.row) {\n            block_damage(block)\n            effect_sprite = sprites.create(image.create(160, 2))\n            effect_sprite.image.fill(9)\n            effect_sprite.setPosition(80, block.y)\n            effect_sprite.lifespan = 500\n        }\n        \n    }\n}\n\n//  /GM2\n//  GM2\nfunction vertical_destroyer_hit(location: tiles.Location) {\n    let effect_sprite: Sprite;\n    for (let block of tilesAdvanced.getAllTilesWhereWallIs(true)) {\n        if (block.col == location.col) {\n            block_damage(block)\n            effect_sprite = sprites.create(image.create(2, 120))\n            effect_sprite.image.fill(9)\n            effect_sprite.setPosition(block.x, 60)\n            effect_sprite.lifespan = 500\n        }\n        \n    }\n}\n\n//  /GM2"],[0,"\nfun"]],"start1":6174,"start2":6174,"length1":142,"length2":1771},{"diffs":[[0,"ocation: any) {\n"],[1,"    let effect_sprite: Sprite;\n"],[0,"    if (tiles.ti"]],"start1":7965,"start2":7965,"length1":32,"length2":63},{"diffs":[[0,").destroy()\n"],[1,"    //  BH3\n"],[0,"    if (new_"]],"start1":8215,"start2":8215,"length1":24,"length2":36},{"diffs":[[0,"new_life < 1"],[-1,") {"],[1," || one_shot_active) {\n        //  EDIT\n        //  /BH3"],[0,"\n        til"]],"start1":8247,"start2":8247,"length1":27,"length2":80},{"diffs":[[0,"    "],[-1,"} else {\n        tiles.setDataNumber(location, \"life\", new_life)\n        make_lives_text(location)"],[1,"    //  BH1\n        scene.cameraShake(4, 500)\n        music.bigCrash.play()\n    } else {\n        //  /BH1\n        tiles.setDataNumber(location, \"life\", new_life)\n        make_lives_text(location)\n        //  BH1\n        music.footstep.play()\n        effect_sprite = sprites.create(image.create(16, 16))\n        effect_sprite.image.fill(2)\n        tiles.placeOnTile(effect_sprite, location)\n        effect_sprite.setFlag(SpriteFlag.Invisible, true)\n        effect_sprite.startEffect(effects.ashes, 200)\n        effect_sprite.lifespan = 200\n        //  /BH1\n        //  BH3\n        power_up_bar.value += 1"],[0,"\n   "]],"start1":8444,"start2":8444,"length1":106,"length2":611},{"diffs":[[0,"    \n}\n\n"],[1,"//  /BH3\n"],[0,"scene.on"]],"start1":9058,"start2":9058,"length1":16,"length2":25},{"diffs":[[0,"Location) {\n"],[1,"    //  GM2\n    if (tiles.tileAtLocationEquals(location, assets.tile`horizontal`)) {\n        horizontal_destroyer_hit(location)\n    }\n    \n    if (tiles.tileAtLocationEquals(location, assets.tile`vertical`)) {\n        vertical_destroyer_hit(location)\n    }\n    \n    //  /GM2\n"],[0,"    if (tile"]],"start1":9162,"start2":9162,"length1":24,"length2":299},{"diffs":[[0,"    \n})\n"],[1,"//  GM1 REMOVE\n"],[0,"function"]],"start1":9741,"start2":9741,"length1":16,"length2":31},{"diffs":[[0,"gle)\n}\n\n"],[1,"//  /GM1\n//  GM1\nfunction path() {\n    let dot_sprite: Sprite;\n    aim_sprite.setPosition(ghost.x, ghost.y)\n    let direction = spriteutils.angleFrom(ghost, pointer)\n    let x_vector = Math.cos(direction)\n    let y_vector = Math.sin(direction)\n    let dot = image.create(2, 2)\n    dot.fill(1)\n    for (let path_length = 0; path_length < 10; path_length++) {\n        dot_sprite = sprites.create(dot, SpriteKind.path)\n        dot_sprite.setPosition(aim_sprite.x, aim_sprite.y)\n        for (let step_length = 0; step_length < 15; step_length++) {\n            aim_sprite.x += x_vector\n            if (tiles.tileAtLocationIsWall(aim_sprite.tilemapLocation())) {\n                aim_sprite.x -= x_vector\n                x_vector *= -1\n            }\n            \n            aim_sprite.y += y_vector\n            if (tiles.tileAtLocationIsWall(aim_sprite.tilemapLocation())) {\n                aim_sprite.y -= y_vector\n                y_vector *= -1\n            }\n            \n        }\n    }\n}\n\n//  --GH1\n"],[0,"sprites."]],"start1":9913,"start2":9913,"length1":16,"length2":1013},{"diffs":[[0,"me_loop() {\n"],[1,"    //  BH3 and BH5\n    \n    //  EDIT\n    //  /BH3 and /BH5\n"],[0,"    if (tile"]],"start1":10980,"start2":10980,"length1":24,"length2":84},{"diffs":[[0,").length < 1) {\n"],[1,"        //  BH3\n        one_shot_active = false\n        //  /BH3\n        //  BH5\n        if (randint(1, 1) == 1) {\n            lives += 1\n        }\n        \n        //  /BH5\n"],[0,"        cycle_bl"]],"start1":11197,"start2":11197,"length1":32,"length2":206},{"diffs":[[0,"    \n})\n"],[1,"//  /GM1\n"],[0,"game.onU"]],"start1":11416,"start2":11416,"length1":16,"length2":25},{"diffs":[[0,"   \n    "],[-1,"aim()"],[1,"//  GM1\n    //  aim() # REMOVE\n    if (sprites.allOfKind(SpriteKind.path).length > 0) {\n        sprites.destroyAllSpritesOfKind(SpriteKind.path)\n    }\n    \n    if (draw_path) {\n        path()\n    }\n    "],[0,"\n})\n"]],"start1":11618,"start2":11618,"length1":17,"length2":214}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":952,"start2":952,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1716548119640,"editorVersion":"2.0.2","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"mixer_play_sound\"><field name=\"sound\">music.baDing</field></block></statement></block></xml>","main.ts":"","README.md":" ","assets.json":"","main.py":"music.ba_ding.play()","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"with music\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.12.2\",\n        \"pxt\": \"8.5.2\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1718042395638,"editorVersion":"2.0.3","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","main.py":"\n","pxt.json":"{\n    \"name\": \"Untitled\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1719570268829,"editorVersion":"2.0.3","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"Untitled\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[]}